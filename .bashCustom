#!/bin/bash

# This file is loaded from ._bashLoader 'array for loop'
echo "	${BLF}.bashCustom${CLEAR} loaded successfully..."
echo "		...includes prompt & color customizations..."

# The various escape codes that we can use to color our prompt.
# Usable but not used:
        RED="\[\033[0;31m\]"
     YELLOW="\[\033[1;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[1;34m\]"
     PURPLE="\[\033[0;35m\]"
  LIGHTRED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GREY="\[\033[0;37m\]"
 COLOR_NONE="\[\e[0m\]"
 # Used:
	fBLACK=$(tput setaf 0);
	fRED=$(tput setaf 1);
	fGREEN=$(tput setaf 2);
	fYELLOW=$(tput setaf 3);
	fBLUE=$(tput setaf 4);
	fMAGENTA=$(tput setaf 5);
	fCYAN=$(tput setaf 6);
	fWHITE=$(tput setaf 7);
	fGREY=$(tput setaf 8);
 	fDARK_RED=$(tput setaf 9);
	fGREEN=$(tput setaf 10);
	fWHITE=$(tput setaf 15);
  fMILD_BLUE=$(tput setaf 20);
	fLIGHT_BLUE=$(tput setaf 27);
  fDIM_GREEN=$(tput setaf 28);
	fMILD_GREEN=$(tput setaf 35);
  fDIM_BLUE=$(tput setaf 25);
  fLIGHT_BLUE=$(tput setaf 69);
  fMID_GREY=$(tput setaf 240);

	bBLACK=$(tput setab 0);
	bRED=$(tput setab 1);
	bGREEN=$(tput setab 2);
	bYELLOW=$(tput setab 3);
	bBLUE=$(tput setab 4);
	bMAGENTA=$(tput setab 5);
	bCYAN=$(tput setab 6);
	bWHITE=$(tput setab 7);
	bGREY=$(tput setab 8);
	bDARK_RED=$(tput setab 9);
	bGREEN=$(tput setab 10);
	bWHITE=$(tput setab 15);
  bDARK_BLUE=$(tput setab 18);
	bLIGHT_BLUE=$(tput setab 27);
	bMILD_GREEN=$(tput setab 35);
  bGREY_BLUE=$(tput setab 69);

	BOLD=$(tput bold);
  UNDERLINE=$(tput smul);
	STANDOUT=$(tput smso);
  CLEAR_FORMAT=$(tput sgr0);

  MINOR=${fMID_GREY};
  INFO_LINE=${fMILD_BLUE};

# GIT Prompt Function:
function prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='changes uncommited ';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='unstaged changes ';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='untracked files ';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='stashed files ';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s="[ ${s}]";

		echo -e "${fRED}${1}${fRED}${branchName}${CLEAR_FORMAT} branch\n${2}${s}";
	else
		return;
	fi;
}

# Highlight the user name when logged in as root.
function set_user () {
	if [[ "${USER}" == "root" ]]; then
		userName="${BOLD}${fRED}\u";
	else
		userName="${fLIGHT_BLUE}\u";
	fi;
}

# Highlight the hostname when connected via SSH.
function set_host () {
	if [[ "${SSH_TTY}" ]]; then
		hostName="\[${BOLD}${fRED}\]\${HOSTNAME}";
	else
		hostName="\[${fYELLOW}\[${HOSTNAME}";
	fi;
}

# Set prompt.
function set_prompt_symbol () {
  if test $1 -eq 0 ; then
      PROMPT_SYMBOL="\[${fGREEN}\[$\]"
  else
      PROMPT_SYMBOL="\[${fRED}\$${CLEAR_FORMAT}\]"
  fi
}

# Determine active Python virtualenv details.
function set_virtualenv() {
  if test -z "$VIRTUAL_ENV" ; then
      PYTHON_VIRTUALENV=""
  else
      PYTHON_VIRTUALENV="\n\[${fMID_GREY}\]	virtualEnv: \[${fRED}\]`basename \"$VIRTUAL_ENV\"`\[ ${CLEAR_FORMAT}\] "
  fi
}

function set_bash_prompt() {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the PYTHON_VIRTUALENV variable.
  set_virtualenv

	# Set user style
	set_user

	# Set host style
	set_host

  # Set the BRANCH variable.
  #set_git_branch
	#prompt_git
###### This is where master [!?] is comming from #####

  # Set the bash prompt variable.
  #PS1="

#${fGREEN}\u@\h${CLEAR_FORMAT}:${fYELLOW}\w${CLEAR_FORMAT${BRANCH}
#${PROMPT_SYMBOL} "

# Date, Time & Bash Version
PS1="\n";
PS1+="\[${INFO_LINE}\]\d \[${MINOR}\]@ \[${INFO_LINE}\]\t \[${MINOR}\]using \[\[${INFO_LINE}\]Bash \V\[${CLEAR_FORMAT}\]\n";
PS1+="\[${BOLD}\]";
# Username
PS1+="\[${BOLD}\]";
PS1+="\[${userName}";
PS1+="\[${CLEAR_FORMAT} @ ";
# Hostname
PS1+="\[${BOLD}\]";
PS1+="\[${hostName}";
PS1+="\[${CLEAR_FORMAT} in ";
# Working Directory
PS1+="\[${BOLD}\]";
PS1+="\[${fDIM_GREEN}\W";
PS1+="\[${CLEAR_FORMAT}\]";
# Git Info
PS1+="\[${CLEAR_FORMAT}\]";
PS1+="\$(prompt_git \"\[${CLEAR_FORMAT}\] on \" \"\[${CLEAR_FORMAT}\]	git status: \[${fRED}\]\")";
# Python Environment
PS1+="\[${PYTHON_VIRTUALENV}\]";
# Prompt
PS1+="\n\[${PROMPT_SYMBOL}\] ";
PS1+="\[${CLEAR_FORMAT}\]";		# Reset
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt

# LSCOLORS CustomizationS:
# -->(Refer to "$ man ls")

#export CLICOLOR=1
#export LSCOLORS=Gxfxcxdxbxegedabagacad
