#!/bin/bash

# This file is loaded from ._bashLoader 'array for loop'
echo "	${BLF}.bashCustom${CLEAR} loaded successfully..."
echo "		...includes prompt & color customizations..."

# Color definitions located in following sourced file:
source ~/.bash/colorFormat

  MINOR=${fMID_GREY};
  INFO_LINE=${fMILD_BLUE};

# GIT Prompt Function:
function prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='changes_uncommited ';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='unstaged_changes ';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='untracked_files ';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='stashed_files ';
			fi;

			# Clean tree status.
			if [ -z "$s" ]; then
				s+='tree_clean ';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s="[ ${s}]";

		echo -e "${fRED}${1}${fRED}${branchName}${CLEAR} branch\n${2}${s}";
	else
		return;
	fi;
}

# Highlight the user name when logged in as root.
function set_user () {
	if [[ "${USER}" == "root" ]]; then
		userName="${BOLD}${fRED}\u";
	else
		userName="${fLIGHT_BLUE}\u";
	fi;
}

# Highlight the hostname when connected via SSH.
function set_host () {
	if [[ "${SSH_TTY}" ]]; then
		hostName="\[${BOLD}${fRED}\]\${HOSTNAME}";
	else
		hostName="\[${fYELLOW}\[${HOSTNAME}";
	fi;
}

# Set prompt.
function set_prompt_symbol () {
  if test $1 -eq 0 ; then
      PROMPT_SYMBOL="\[${fGREEN}\[$\]"
  else
      PROMPT_SYMBOL="\[${fRED}\$${CLEAR}\]"
  fi
}

# Determine active Python virtualenv details.
function set_virtualenv() {
  if test -z "$VIRTUAL_ENV" ; then
      PYTHON_VIRTUALENV=""
  else
      PYTHON_VIRTUALENV="\n\[${fMID_GREY}\]	virtualEnv: \[${fRED}\]`basename \"$VIRTUAL_ENV\"`\[ ${CLEAR}\] "
  fi
}

# Determine Python Version being used and its source.
function get_python_info() {
	PYTHON_VERSION=" & \[${INFO_LINE}\]$(python --version)\[${CLEAR}\]"
	
	if brew ls --versions pyenv > /dev/null; then
			PYTHON_VERSION+=" (pyenv)\n"
	else
  	####### NOTE: Should add alternate Python version options; eg Anaconda, etc...
		# Using system Python
		PYTHON_VERSION+=" (system)\n"
	fi
}

function set_bash_prompt() {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the PYTHON_VIRTUALENV variable.
  set_virtualenv

	# Set user style
	set_user

	# Set host style
	set_host
	
	# Get Python Info
	get_python_info

  # Set the BRANCH variable.
  #set_git_branch
	#prompt_git
###### This is where master [!?] is comming from #####

  # Set the bash prompt variable.
  #PS1="

#${fGREEN}\u@\h${CLEAR}:${fYELLOW}\w${CLEAR${BRANCH}
#${PROMPT_SYMBOL} "

# Date, Time & Bash Version
PS1="\n";
PS1+="\[${INFO_LINE}\]\d \[${MINOR}\]@ \[${INFO_LINE}\]\t \[${MINOR}\]using \[\[${INFO_LINE}\]Bash \V\[${CLEAR}\]";
# PyEnv
PS1+="\[${PYTHON_VERSION}\]";
PS1+="\[${BOLD}\]";
# Username
PS1+="\[${BOLD}\]";
PS1+="\[${userName}";
PS1+="\[${CLEAR} @ ";
# Hostname
PS1+="\[${BOLD}\]";
PS1+="\[${hostName}";
PS1+="\[${CLEAR} in ";
# Working Directory
PS1+="\[${BOLD}\]";
PS1+="\[${fDIM_GREEN}\W";
PS1+="\[${CLEAR}\]";
# Git Info
PS1+="\[${CLEAR}\]";
PS1+="\$(prompt_git \"\[${CLEAR}\] on \" \"\[${CLEAR}\]	git status: \[${fRED}\]\")";
# Python Environment
PS1+="\[${PYTHON_VIRTUALENV}\]";
# Prompt
PS1+="\n\[${PROMPT_SYMBOL}\] ";
PS1+="\[${CLEAR}\]";		# Reset
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt

# LSCOLORS CustomizationS:
# -->(Refer to "$ man ls")

#export CLICOLOR=1
#export LSCOLORS=Gxfxcxdxbxegedabagacad
